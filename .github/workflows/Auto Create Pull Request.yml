name: Auto Create Pull Request
on:
  push:
    branches-ignore:
      - master
      - main

  #   - 'feature/*' # 监听以'feature/'开头的分支
  #   - 'fix/*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      manual_branch:
        description: Set branch
        required: true
        type: string

permissions: write-all
env:
  MAIN_BRANCH: ${{ vars.MAIN_BRANCH || github.event.repository.default_branch }} # 主分支名称
  PREVIEW_REPO: ${{ vars.PREVIEW_REPO || 'ripplejourney/preview' }}
  PREVIEW_BASE_URL: ${{ vars.PREVIEW_BASE_URL || 'https://www.dmsrs.org/preview' }}
  PRODUCT_BASE_URL: ${{ vars.PRODUCT_BASE_URL || 'https://www.dmsrs.org' }}
  REVIEWERS: ${{ vars.REVIEWERS || 'calmripple' }}

concurrency:
  # 针对远程部署库，无法同时部署多个preview 添加并行限制
  # group: preview-${{ github.event_name }}-${{ github.event.number || github.ref_name }}
  # cancel-in-progress: true
  group: ripplejourney/preview
  cancel-in-progress: false

jobs:
  check:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'wip')}}
    outputs:
      is_main_branch: ${{ steps.check.outputs.is_main_branch }}
      is_not_contain_wip: ${{ steps.check.outputs.is_not_contain_wip }}
    steps:
      - name: Check if it is the main branch
        if: ${{ !contains(github.ref, env.MAIN_BRANCH)}}
        id: check
        run: |
          echo "is_main_branch=${{ github.ref  == 'refs/heads/${{ env.MAIN_BRANCH }}' }}" >> $GITHUB_OUTPUT
          echo "is_not_contain_wip=${{ !contains(github.event.head_commit.message, 'wip') }}" >> $GITHUB_OUTPUT
          # echo "{name}={value}" >> $GITHUB_STATE
          # echo "{name}={value}" >> $GITHUB_OUTPUT
  create-pr:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.is_main_branch && needs.check.outputs.is_not_contain_wip }}
    outputs:
      pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
      pull-request-operation: ${{ steps.create_pr.outputs.pull-request-operation }}
    steps:
      # - name: display some info
      #   run: |
      #     echo "github.env.MAIN_BRANCH = ${{ github.env.MAIN_BRANCH }}"
      #     echo "env.MAIN_BRANCH = ${{ env.MAIN_BRANCH }}"
      #     echo "${{ !contains(github.ref, env.MAIN_BRANCH)}} =${{github.ref}} ? ${{env.MAIN_BRANCH}}"
      # - name: printenv
      #   run: printenv

      # - name: display some info
      #   if: ${{ !contains(github.ref, env.MAIN_BRANCH)}}
      #   run: echo "${{ !contains(github.ref, env.MAIN_BRANCH)}} =${{github.ref}} ? ${{env.MAIN_BRANCH}}"

      - name: Checkout repository
        if: ${{ !contains(github.ref, env.MAIN_BRANCH)}}
        uses: actions/checkout@v4

      - name: Git Configuration
        # 2、配置 Git
        run: |
          git config --global core.quotePath false
          git config --global core.autocrlf false
          git config --global core.safecrlf true
          git config --global core.ignorecase false

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: auto-create-pr'
          title: '[auto PR]${{ github.ref_name }}'
          body: |
            This is an automated pull request created from a feature branch.
            Please review and merge if ready.
          branch: ${{ github.ref }}
          base: ${{env.MAIN_BRANCH}} # 目标分支，根据你的仓库情况可能是'main'或'master'
          delete-branch: false
          # # A comma or newline-separated list of reviewers (GitHub usernames) to request a review from.
          reviewers: ${{env.reviewers}}
          # # A comma or newline-separated list of GitHub teams to request a review from. Note that a repo scoped PAT, or equivalent GitHub App permissions, are required.
          # team-reviewers: ${{env.team-reviewers}}
  # enable-automerge:
  #   if: ${{!contains(github.event.head_commit.message, 'wip') && needs.create-pr.outputs.pull-request-operation != 'closed'}}
  #   needs: create-pr
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Enable Pull Request Automerge
  #       if: ${{ needs.create-pr.outputs.pull-request-operation != 'closed' }}
  #       uses: peter-evans/enable-pull-request-automerge@v3
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         pull-request-number: ${{ needs.create-pr.outputs.pull-request-number }}
  #         merge-method: rebase

  # - name: Invoke 'Pull Request Check and Deploy Preview.yml' in current repo with inputs # 因为使用github token，不能创建新的工作流运行，需要手动触发
  #   uses: benc-uk/workflow-dispatch@v1
  #   with:
  #     workflow: 'Pull Request Check and Deploy Preview.yml'
  #     # repo: benc-uk/example
  #     # inputs: '{ "message": "blah blah", "something": false }'
  #     # Required when using the `repo` option. Either a PAT or a token generated from the GitHub app or CLI
  #     # token: "${{ secrets.GITHUB_TOKEN }}"
  preview:
    if: ${{!contains(github.event.head_commit.message, 'wip') && needs.create-pr.outputs.pull-request-operation != 'closed'}}
    runs-on: ubuntu-latest
    needs: [create-pr]
    environment:
      name: preview
      url: ${{ steps.baseurl.outputs.PREVIEW_BASE_URL }}
    outputs:
      preview_url: ${{ steps.baseurl.outputs.PREVIEW_BASE_URL }}
    steps:
      # This will calculate the base URL for the website, based on the event that triggered the workflow.
      # Leave this step as it is, unless you know what you're doing.
      - name: Determine base URL
        id: baseurl
        run: |
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
            PREVIEW_BASE_URL="${{ env.PREVIEW_BASE_URL }}/${{ github.repository }}/pr/${{ needs.create-pr.outputs.pull-request-number }}"
          else
            PREVIEW_BASE_URL="${{ env.PREVIEW_BASE_URL }}/${{ github.repository }}/branch/${{ github.ref_name }}"
          fi

          RELATIVE_URL=/$(echo "$PREVIEW_BASE_URL" | cut -d/ -f4-)

          echo "PREVIEW_BASE_URL=$PREVIEW_BASE_URL" >> "$GITHUB_OUTPUT"
          echo "RELATIVE_URL=$RELATIVE_URL" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Checkout branch - ${{env.MAIN_BRANCH}}
        uses: actions/checkout@v4
        with:
          ref: ${{env.MAIN_BRANCH}}
          # 默认只拉取分支最近一次的 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉取所有分支所有提交
          fetch-depth: 0
      - name: Checkout PR head

        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ needs.create-pr.outputs.pull-request-number }}/merge
          # 默认只拉取分支最近一次的 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉取所有分支所有提交
          fetch-depth: 0

      - name: Setup PNPM
        # 3、安装 PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10

      # Assuming you're using Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 21
          # registry-url: https://registry.npmjs.org
          cache: pnpm

      # - name: Install dependencies
      #   run: pnpm install --no-frozen-lockfile
      # pnpm install
      # pnpm install -w -r --no-frozen-lockfile #不知何故，突然无法正确安装，去掉所有参数后可以正常安装pkg 20240708
      # pnpm install --no-frozen-lockfile #不知何故，突然无法正确安装，去掉所有参数后可以正常安装pkg 20240708

      # Run your usual build command, but make sure to use the correct base URL
      # This example assumes you're using React, and that you're using the RELATIVE_URL env variable
      - name: pnpm build
        env:
          RELATIVE_URL: ${{ steps.baseurl.outputs.RELATIVE_URL }}
          BASE_URL: ${{ steps.baseurl.outputs.PREVIEW_BASE_URL }}
        run: |
          pnpm install --no-frozen-lockfile
          pnpm buildlib
          pnpm build

      # This will trigger the action. Make sure to change the build_dir input to the correct directory
      - uses: EndBug/pages-preview@v1.1.1
        # env:
        #   RELATIVE_URL: ${{ steps.baseurl.outputs.RELATIVE_URL }}
        #   BASE_URL: ${{ steps.baseurl.outputs.PREVIEW_BASE_URL }}
        with:
          #     # The directory in which the website has been built, in the a/b/c format
          build_dir: packages/blogpress/.vitepress/dist # Change this!

          #     # The GitHub Pages base URL of the preview repo
          preview_base_url: ${{ env.PREVIEW_BASE_URL }}

          #     # The repository to push previews to, in the Owner/Name format
          preview_repo: ${{ env.PREVIEW_REPO }}

          #     # The token to access the preview repo, that you created during setup
          preview_token: ${{ secrets.PREVIEW_TOKEN }}

          #     # --- OPTIONAL ---
          #     # The name of the environment to use for the deployment
          #     # Default: 'preview'
          #     deployment_env: 'development'

          #     # Whether to use the deployments API
          #     # Default: 'true'
          #     deployments: false

          #     # The name of the author of the resulting commit
          #     # Default: the GitHub Actor
          # git_author_name: calmripple

          #     # The email of the author of the resulting commit
          #     # Default: the GitHub Actor's
          # git_author_email: calmripple@users.noreply.github.com

          #     # The committer of the resulting commit
          #     # Default: copies git_author_name
          #     git_committer_name: GitHub Actions

          #     # The email of the committer of the resulting commit
          #     # Default: copies git_author_email
          # git_committer_email: 41898282+github-actions[bot]@users.noreply.github.com

          #     # Whether to comment on PRs
          #     # Default: 'true'
          #     pr_comment: 'false'

          #     # The name of the branch that hosts the previews
          #     # Default: gh-pages
          #     preview_branch: gh-pages

          #     # The name of the workflow file that contains the comment workflow in the preview repo
          #     # Default: preview.yml
          #     preview_workflow_file_name: preview.yml

  merge:
    needs: [create-pr, preview]
    runs-on: ubuntu-latest

    steps:
      - name: merge
        uses: nbrugger-tgm/merge-pr-action@v0.2.3
        with:
          pull_request: ${{needs.create-pr.outputs.pull-request-number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          method: rebase
      - name: output
        run: |
          echo "commit = ${{ toJson(steps)  }}"

  deploy:

    needs: [merge]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{env.MAIN_BRANCH}}
          # 默认只拉取分支最近一次的 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉取所有分支所有提交
          fetch-depth: 0
      - name: Git Configuration
        # 2、配置 Git
        run: |
          git config --global core.quotePath false
          git config --global core.autocrlf false
          git config --global core.safecrlf true
          git config --global core.ignorecase false

      - name: Setup PNPM
        # 3、安装 PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        # 4、安装 Node 环境
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 21
          registry-url: https://registry.npmjs.org
          cache: pnpm

      - name: Install Dependencies & Build
        env:
          RELATIVE_URL: ''
          BASE_URL: ${{ env.PRODUCT_BASE_URL }}
        run: |
          pnpm install --no-frozen-lockfile
          pnpm buildlib
          pnpm build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: packages/blogpress/.vitepress/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
