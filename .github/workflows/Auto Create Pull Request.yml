name: Auto Create Pull Request
on:
  push:
  # branches:
  #   - 'feature/*' # 监听以'feature/'开头的分支
  #   - 'fix/*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
permissions: write-all
env:
  MAIN_BRANCH: ${{ vars.MAIN_BRANCH || 'master' }} # 主分支名称
jobs:
  create-pr:

    runs-on: ubuntu-latest
    steps:
      - name: display some info
        run: |
          echo "github.env.MAIN_BRANCH = ${{ github.env.MAIN_BRANCH }}"
          echo "env.MAIN_BRANCH = ${{ env.MAIN_BRANCH }}"
          echo "${{ !contains(github.ref, env.MAIN_BRANCH)}} =${{github.ref}} ? ${{env.MAIN_BRANCH}}"
      - name: printenv
        run: printenv

      - name: display some info
        if: ${{ !contains(github.ref, env.MAIN_BRANCH)}}
        run: echo "${{ !contains(github.ref, env.MAIN_BRANCH)}} =${{github.ref}} ? ${{env.MAIN_BRANCH}}"

      - name: Checkout repository
        if: ${{ !contains(github.ref, env.MAIN_BRANCH)}}
        uses: actions/checkout@v4

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: auto-create-pr'
          title: '[AutoPR]${{ github.ref_name }}'
          body: |
            This is an automated pull request created from a feature branch.
            Please review and merge if ready.
          branch: ${{ github.ref }}
          base: ${{env.MAIN_BRANCH}} # 目标分支，根据你的仓库情况可能是'main'或'master'
          delete-branch: true

      - name: Enable Pull Request Automerge
        if: steps.create_pr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: squash

      # - name: Invoke 'Pull Request Check and Deploy Preview.yml' in current repo with inputs # 因为使用github token，不能创建新的工作流运行，需要手动触发
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     workflow: 'Pull Request Check and Deploy Preview.yml'
      #     # repo: benc-uk/example
      #     # inputs: '{ "message": "blah blah", "something": false }'
      #     # Required when using the `repo` option. Either a PAT or a token generated from the GitHub app or CLI
      #     # token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Checkout branch
        if: ${{ !startsWith(github.event_name, 'pull_request') }}
        uses: actions/checkout@v4
        with:
          # 默认只拉取分支最近一次的 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉取所有分支所有提交
          fetch-depth: 0
      - name: Checkout PR head
        if: ${{ startsWith(github.event_name, 'pull_request') && github.event.action != 'closed' }}
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          # 默认只拉取分支最近一次的 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉取所有分支所有提交
          fetch-depth: 0

      - name: Setup PNPM
        # 3、安装 PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Assuming you're using Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4.1.0
        if: ${{ github.event.action != 'closed' }} # Skipping these steps if the PR has been closed
        with:
          node-version: 21
          # registry-url: https://registry.npmjs.org
          cache: pnpm

      - name: Install dependencies
        if: ${{ github.event.action != 'closed' }}
        # run: pnpm install --ignore-scripts
        run: |
          pnpm install
          # pnpm install -w -r --no-frozen-lockfile #不知何故，突然无法正确安装，去掉所有参数后可以正常安装pkg 20240708

      # This will calculate the base URL for the website, based on the event that triggered the workflow.
      # Leave this step as it is, unless you know what you're doing.
      - name: Determine base URL
        if: ${{ github.event.action != 'closed' }}
        id: baseurl
        run: |
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
            full="${{ env.PAGES_BASE }}/${{ github.repository }}/pr/${{ github.event.number }}"
          else
            full="${{ env.PAGES_BASE }}/${{ github.repository }}/branch/${{ github.ref_name }}"
          fi

          relative=/$(echo "$full" | cut -d/ -f4-)

          echo "full=$full" >> "$GITHUB_OUTPUT"
          echo "relative=$relative" >> "$GITHUB_OUTPUT"
        shell: bash

      # Run your usual build command, but make sure to use the correct base URL
      # This example assumes you're using React, and that you're using the PUBLIC_URL env variable
      - name: pnpm buildlib
        if: ${{ github.event.action != 'closed' }}
        run: pnpm buildlib
        env:
          PUBLIC_URL: ${{ steps.baseurl.outputs.relative }}
          FULL_URL: ${{ steps.baseurl.outputs.full }}
      - name: pnpm build
        if: ${{ github.event.action != 'closed' }}
        run: pnpm build
        env:
          PUBLIC_URL: ${{ steps.baseurl.outputs.relative }}
          FULL_URL: ${{ steps.baseurl.outputs.full }}

      # This will trigger the action. Make sure to change the build_dir input to the correct directory
      - uses: EndBug/pages-preview@v1.1.1
        with:
          build_dir: packages/blogpress/.vitepress/dist # Change this!
          preview_base_url: ${{ env.PAGES_BASE }}
          preview_repo: ${{ env.PREVIEW_REPO }}
          preview_token: ${{ secrets.PREVIEW_TOKEN }}
        env:
          PUBLIC_URL: ${{ steps.baseurl.outputs.relative }}
          FULL_URL: ${{ steps.baseurl.outputs.full }}
          # - uses: EndBug/pages-preview@v1
          #   with:
          #     # The directory in which the website has been built, in the a/b/c format
          #     build_dir: packages/blogpress/.vitepress/dist

          #     # The GitHub Pages base URL of the preview repo
          #     preview_base_url: https://ripplejourney.github.io/preview

          #     # The repository to push previews to, in the Owner/Name format
          #     preview_repo: ripplejourney/preview

          #     # The token to access the preview repo, that you created during setup
          #     preview_token: ${{ secrets.PREVIEW_TOKEN }}

          #     # --- OPTIONAL ---
          #     # The name of the environment to use for the deployment
          #     # Default: 'preview'
          #     deployment_env: 'development'

          #     # Whether to use the deployments API
          #     # Default: 'true'
          #     deployments: false

          #     # The name of the author of the resulting commit
          #     # Default: the GitHub Actor
          git_author_name: calmripple

          #     # The email of the author of the resulting commit
          #     # Default: the GitHub Actor's
          git_author_email: calmripple@users.noreply.github.com

          #     # The committer of the resulting commit
          #     # Default: copies git_author_name
          #     git_committer_name: GitHub Actions

          #     # The email of the committer of the resulting commit
          #     # Default: copies git_author_email
          git_committer_email: 41898282+github-actions[bot]@users.noreply.github.com

      #     # Whether to comment on PRs
      #     # Default: 'true'
      #     pr_comment: 'false'

      #     # The name of the branch that hosts the previews
      #     # Default: gh-pages
      #     preview_branch: gh-pages

      #     # The name of the workflow file that contains the comment workflow in the preview repo
      #     # Default: preview.yml
      #     preview_workflow_file_name: preview.yml

